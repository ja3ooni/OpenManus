# Docker Compose configuration for production environment
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: "3.8"

services:
  openmanus:
    build:
      target: production

    environment:
      - OPENMANUS_ENV=production

    # Production-specific volumes (read-only source)
    volumes:
      - ./config:/app/config:ro
      - openmanus-workspace:/app/workspace
      - openmanus-logs:/app/logs
      - openmanus-data:/app/data

    # Production resource limits
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: "4.0"
        reservations:
          memory: 2G
          cpus: "1.0"

      # Restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    # Security options
    security_opt:
      - no-new-privileges:true

    # Read-only root filesystem (with exceptions)
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /var/tmp:rw,noexec,nosuid,size=50m

  redis:
    # Production Redis configuration
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.1"

    # Redis production settings
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Production database (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: openmanus-postgres

    environment:
      - POSTGRES_DB=${POSTGRES_DB:-openmanus}
      - POSTGRES_USER=${POSTGRES_USER:-openmanus}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./scripts/backup:/backup:rw

    networks:
      - openmanus-network

    restart: unless-stopped

    # Production PostgreSQL settings
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_min_duration_statement=1000

    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.25"

    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Nginx with SSL termination
  nginx:
    volumes:
      - ./config/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.1"

    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: openmanus-fluentd

    volumes:
      - ./config/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - openmanus-logs:/app/logs:ro
      - nginx-logs:/var/log/nginx:ro

    ports:
      - "24224:24224"
      - "24224:24224/udp"

    networks:
      - openmanus-network

    restart: unless-stopped

    profiles:
      - logging

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: openmanus-backup

    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-openmanus}
      - POSTGRES_USER=${POSTGRES_USER:-openmanus}

    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup-data:/backup

    networks:
      - openmanus-network

    # Run backup daily at 2 AM
    command: >
      sh -c "
        while true; do
          sleep 86400
          /backup.sh
        done
      "

    depends_on:
      - postgres

    profiles:
      - backup

volumes:
  postgres-data:
    driver: local
  backup-data:
    driver: local
